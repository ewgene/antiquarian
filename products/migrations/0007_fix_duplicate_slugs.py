# Generated by Django 5.1.4 on 2025-06-18 08:26

from django.db import migrations
from django.utils.text import slugify


def fix_duplicate_slugs(apps, schema_editor):
    Product = apps.get_model('products', 'Product')
    
    # Get all products and group them by their base slug
    products = Product.objects.all().order_by('id')
    slug_counts = {}
    
    for product in products:
        if not product.slug:
            # Generate slug if it doesn't exist
            base_slug = slugify(product.name)
        else:
            # Extract base slug (remove any existing counter)
            base_slug = product.slug
            if '-' in base_slug:
                # Check if the part after the last dash is a number
                parts = base_slug.split('-')
                if parts[-1].isdigit():
                    base_slug = '-'.join(parts[:-1])
        
        # Count occurrences of this base slug
        if base_slug not in slug_counts:
            slug_counts[base_slug] = 0
        slug_counts[base_slug] += 1
        
        # Generate unique slug
        if slug_counts[base_slug] == 1:
            new_slug = base_slug
        else:
            new_slug = f"{base_slug}-{slug_counts[base_slug] - 1}"
        
        # Update the product if slug changed
        if product.slug != new_slug:
            product.slug = new_slug
            product.save(update_fields=['slug'])


def reverse_fix_duplicate_slugs(apps, schema_editor):
    # This migration cannot be reversed safely
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0006_alter_product_slug'),
    ]

    operations = [
        migrations.RunPython(fix_duplicate_slugs, reverse_fix_duplicate_slugs),
    ]
